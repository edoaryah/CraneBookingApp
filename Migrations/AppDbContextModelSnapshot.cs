// <auto-generated />
using System;
using AspnetCoreMvcFull.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AspnetCoreMvcFull.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AspnetCoreMvcFull.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BookingNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CostCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("CraneId")
                        .HasColumnType("integer");

                    b.Property<string>("CustomHazard")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ProjectSupervisor")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("SubmitTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CraneId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.BookingHazard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("integer");

                    b.Property<int>("HazardId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("HazardId");

                    b.ToTable("BookingHazards");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.BookingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("BookingItems");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.BookingShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ShiftDefinitionId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("ShiftEndTime")
                        .HasColumnType("interval");

                    b.Property<string>("ShiftName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<TimeSpan>("ShiftStartTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("ShiftDefinitionId");

                    b.ToTable("BookingShifts");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.Breakdown", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualUrgentEndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CraneId")
                        .HasColumnType("integer");

                    b.Property<int>("EstimatedUrgentDays")
                        .HasColumnType("integer");

                    b.Property<int>("EstimatedUrgentHours")
                        .HasColumnType("integer");

                    b.Property<string>("HangfireJobId")
                        .HasColumnType("text");

                    b.Property<string>("Reasons")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UrgentEndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UrgentStartTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CraneId");

                    b.ToTable("Breakdowns");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.Crane", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cranes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 250,
                            Code = "LC008",
                            Status = "Available"
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 150,
                            Code = "LC009",
                            Status = "Available"
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 100,
                            Code = "LC010",
                            Status = "Available"
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 150,
                            Code = "LC011",
                            Status = "Available"
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 35,
                            Code = "LC012",
                            Status = "Available"
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 15,
                            Code = "LC013",
                            Status = "Available"
                        });
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.CraneUsageRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("integer");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<int>("SubcategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("CraneUsageRecords");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.Hazard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Hazards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Listrik Tegangan Tinggi"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Kondisi Tanah"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bekerja di Dekat Bangunan"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bekerja di Dekat Area Mining"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Bekerja di Dekat Air"
                        });
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.MaintenanceSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CraneId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CraneId");

                    b.ToTable("MaintenanceSchedules");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.MaintenanceScheduleShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MaintenanceScheduleId")
                        .HasColumnType("integer");

                    b.Property<int>("ShiftDefinitionId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("ShiftEndTime")
                        .HasColumnType("interval");

                    b.Property<string>("ShiftName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<TimeSpan>("ShiftStartTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceScheduleId");

                    b.HasIndex("ShiftDefinitionId");

                    b.ToTable("MaintenanceScheduleShifts");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.ShiftDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("ShiftDefinitions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Day Shift",
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            IsActive = true,
                            Name = "Pagi (06:00-12:00)",
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            Category = "Day Shift",
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsActive = true,
                            Name = "Siang (12:00-18:00)",
                            StartTime = new TimeSpan(0, 12, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            Category = "Night Shift",
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            IsActive = true,
                            Name = "Sore (18:00-00:00)",
                            StartTime = new TimeSpan(0, 18, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            Category = "Night Shift",
                            EndTime = new TimeSpan(0, 6, 0, 0, 0),
                            IsActive = true,
                            Name = "Malam (00:00-06:00)",
                            StartTime = new TimeSpan(0, 0, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.UsageSubcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OldEnumName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("UsageSubcategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Operating",
                            IsActive = true,
                            Name = "Pengangkatan",
                            OldEnumName = "Pengangkatan"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Operating",
                            IsActive = true,
                            Name = "Menggantung Beban",
                            OldEnumName = "MenggantungBeban"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Delay",
                            IsActive = true,
                            Name = "Menunggu User",
                            OldEnumName = "MenungguUser"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Delay",
                            IsActive = true,
                            Name = "Menunggu Kesiapan Pengangkatan",
                            OldEnumName = "MenungguKesiapanPengangkatan"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Delay",
                            IsActive = true,
                            Name = "Menunggu Pengawalan",
                            OldEnumName = "MenungguPengawalan"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Standby",
                            IsActive = true,
                            Name = "Tidak Sedang Diperlukan",
                            OldEnumName = "TidakSedangDiperlukan"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Standby",
                            IsActive = true,
                            Name = "Tidak Ada Operator",
                            OldEnumName = "TidakAdaOperator"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Standby",
                            IsActive = true,
                            Name = "Tidak Ada Pengawal",
                            OldEnumName = "TidakAdaPengawal"
                        },
                        new
                        {
                            Id = 9,
                            Category = "Standby",
                            IsActive = true,
                            Name = "Istirahat",
                            OldEnumName = "Istirahat"
                        },
                        new
                        {
                            Id = 10,
                            Category = "Standby",
                            IsActive = true,
                            Name = "Ganti Shift",
                            OldEnumName = "GantiShift"
                        },
                        new
                        {
                            Id = 11,
                            Category = "Standby",
                            IsActive = true,
                            Name = "Tidak Bisa Lewat",
                            OldEnumName = "TidakBisaLewat"
                        },
                        new
                        {
                            Id = 12,
                            Category = "Service",
                            IsActive = true,
                            Name = "Servis Rutin Terjadwal",
                            OldEnumName = "ServisRutinTerjadwal"
                        },
                        new
                        {
                            Id = 13,
                            Category = "Breakdown",
                            IsActive = true,
                            Name = "Rusak",
                            OldEnumName = "Rusak"
                        },
                        new
                        {
                            Id = 14,
                            Category = "Breakdown",
                            IsActive = true,
                            Name = "Perbaikan",
                            OldEnumName = "Perbaikan"
                        });
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LdapUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("LdapUser", "RoleId")
                        .IsUnique();

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.Booking", b =>
                {
                    b.HasOne("AspnetCoreMvcFull.Models.Crane", "Crane")
                        .WithMany()
                        .HasForeignKey("CraneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crane");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.BookingHazard", b =>
                {
                    b.HasOne("AspnetCoreMvcFull.Models.Booking", "Booking")
                        .WithMany("BookingHazards")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspnetCoreMvcFull.Models.Hazard", "Hazard")
                        .WithMany()
                        .HasForeignKey("HazardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Hazard");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.BookingItem", b =>
                {
                    b.HasOne("AspnetCoreMvcFull.Models.Booking", "Booking")
                        .WithMany("BookingItems")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.BookingShift", b =>
                {
                    b.HasOne("AspnetCoreMvcFull.Models.Booking", "Booking")
                        .WithMany("BookingShifts")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspnetCoreMvcFull.Models.ShiftDefinition", "ShiftDefinition")
                        .WithMany("BookingShifts")
                        .HasForeignKey("ShiftDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("ShiftDefinition");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.Breakdown", b =>
                {
                    b.HasOne("AspnetCoreMvcFull.Models.Crane", "Crane")
                        .WithMany("Breakdowns")
                        .HasForeignKey("CraneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crane");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.CraneUsageRecord", b =>
                {
                    b.HasOne("AspnetCoreMvcFull.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.MaintenanceSchedule", b =>
                {
                    b.HasOne("AspnetCoreMvcFull.Models.Crane", "Crane")
                        .WithMany()
                        .HasForeignKey("CraneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crane");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.MaintenanceScheduleShift", b =>
                {
                    b.HasOne("AspnetCoreMvcFull.Models.MaintenanceSchedule", "MaintenanceSchedule")
                        .WithMany("MaintenanceScheduleShifts")
                        .HasForeignKey("MaintenanceScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspnetCoreMvcFull.Models.ShiftDefinition", "ShiftDefinition")
                        .WithMany()
                        .HasForeignKey("ShiftDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaintenanceSchedule");

                    b.Navigation("ShiftDefinition");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.UserRole", b =>
                {
                    b.HasOne("AspnetCoreMvcFull.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.Booking", b =>
                {
                    b.Navigation("BookingHazards");

                    b.Navigation("BookingItems");

                    b.Navigation("BookingShifts");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.Crane", b =>
                {
                    b.Navigation("Breakdowns");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.MaintenanceSchedule", b =>
                {
                    b.Navigation("MaintenanceScheduleShifts");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.ShiftDefinition", b =>
                {
                    b.Navigation("BookingShifts");
                });
#pragma warning restore 612, 618
        }
    }
}
