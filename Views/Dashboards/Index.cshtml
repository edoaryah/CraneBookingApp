@{
  ViewData["Title"] = "Dashboard - Crane Metrics";
}

@section VendorStyles
{
  <link rel="stylesheet" href="~/vendor/libs/apex-charts/apex-charts.css" />
  <link rel="stylesheet" href="https://cdn.datatables.net/1.12.1/css/dataTables.bootstrap5.min.css" />
}

@section VendorScripts
{
  <script src="~/vendor/libs/apex-charts/apexcharts.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/moment@2.29.4/min/moment.min.js"></script>
  <script src="https://cdn.datatables.net/1.12.1/js/jquery.dataTables.min.js"></script>
  <script src="https://cdn.datatables.net/1.12.1/js/dataTables.bootstrap5.min.js"></script>
}

<!--Filter Section-->
<div class="card mb-4">
  <div class="card-header d-flex justify-content-between align-items-center">
    <h5 class="mb-0">Filter Data</h5>
    <button type="button" class="btn btn-primary" id="applyFilter">Apply</button>
  </div>
  <div class="card-body">
    <div class="row">
      <div class="col-md-4 mb-3">
        <label for="dateRange" class="form-label">Date Range</label>
        <select id="dateRange" class="form-select">
          <option value="7">Last 7 Days</option>
          <option value="30" selected>Last 30 Days</option>
          <option value="90">Last 3 Months</option>
          <option value="custom">Custom Range</option>
        </select>
      </div>
      <div class="col-md-4 mb-3">
        <label for="craneId" class="form-label">Crane</label>
        <select id="craneId" class="form-select">
          <option value="">All Cranes</option>
          @foreach (var crane in ViewBag.Cranes)
          {
            <option value="@crane.Id">@crane.Code (@crane.Capacity ton)</option>
          }
        </select>
      </div>
      <div class="col-md-4 custom-date-range" style="display: none;">
        <div class="row">
          <div class="col-md-6 mb-3">
            <label for="startDate" class="form-label">Start Date</label>
            <input type="date" id="startDate" class="form-control" />
          </div>
          <div class="col-md-6 mb-3">
            <label for="endDate" class="form-label">End Date</label>
            <input type="date" id="endDate" class="form-control" />
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!--Summary Section-->
<div class="row mb-4">
  <div class="col-md-4 col-sm-6 mb-3">
    <div class="card h-100">
      <div class="card-body">
        <div class="d-flex align-items-start justify-content-between">
          <div class="content-left">
            <h5 class="card-title mb-2">Availability</h5>
            <div class="d-flex align-items-center">
              <h4 class="mb-0 me-2" id="avg-availability">0%</h4>
              <span class="badge bg-label-primary">Average</span>
            </div>
            <small class="text-muted">Available Time / Calendar Time</small>
          </div>
          <div class="avatar">
            <div class="avatar-initial bg-label-primary rounded">
              <i class="bx bx-time-five fs-4"></i>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="col-md-4 col-sm-6 mb-3">
    <div class="card h-100">
      <div class="card-body">
        <div class="d-flex align-items-start justify-content-between">
          <div class="content-left">
            <h5 class="card-title mb-2">Utilisation</h5>
            <div class="d-flex align-items-center">
              <h4 class="mb-0 me-2" id="avg-utilisation">0%</h4>
              <span class="badge bg-label-success">Average</span>
            </div>
            <small class="text-muted">Operating / Calendar Time</small>
          </div>
          <div class="avatar">
            <div class="avatar-initial bg-label-success rounded">
              <i class="bx bx-chart fs-4"></i>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="col-md-4 col-sm-6 mb-3">
    <div class="card h-100">
      <div class="card-body">
        <div class="d-flex align-items-start justify-content-between">
          <div class="content-left">
            <h5 class="card-title mb-2">Usage</h5>
            <div class="d-flex align-items-center">
              <h4 class="mb-0 me-2" id="avg-usage">0%</h4>
              <span class="badge bg-label-info">Average</span>
            </div>
            <small class="text-muted">Utilized Time / Available Time</small>
          </div>
          <div class="avatar">
            <div class="avatar-initial bg-label-info rounded">
              <i class="bx bx-building fs-4"></i>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!--Crane Status-->
<div class="row mb-4">
  <div class="col-md-4 col-sm-6 mb-3">
    <div class="card h-100">
      <div class="card-body">
        <div class="d-flex align-items-start justify-content-between">
          <div class="content-left">
            <h5 class="card-title mb-2">Total Cranes</h5>
            <div class="d-flex align-items-center">
              <h4 class="mb-0" id="total-cranes">0</h4>
            </div>
          </div>
          <div class="avatar">
            <div class="avatar-initial bg-label-secondary rounded">
              <i class="bx bx-cube fs-4"></i>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="col-md-4 col-sm-6 mb-3">
    <div class="card h-100">
      <div class="card-body">
        <div class="d-flex align-items-start justify-content-between">
          <div class="content-left">
            <h5 class="card-title mb-2">Available Cranes</h5>
            <div class="d-flex align-items-center">
              <h4 class="mb-0" id="available-cranes">0</h4>
            </div>
          </div>
          <div class="avatar">
            <div class="avatar-initial bg-label-success rounded">
              <i class="bx bx-check-circle fs-4"></i>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="col-md-4 col-sm-6 mb-3">
    <div class="card h-100">
      <div class="card-body">
        <div class="d-flex align-items-start justify-content-between">
          <div class="content-left">
            <h5 class="card-title mb-2">Maintenance Cranes</h5>
            <div class="d-flex align-items-center">
              <h4 class="mb-0" id="maintenance-cranes">0</h4>
            </div>
          </div>
          <div class="avatar">
            <div class="avatar-initial bg-label-warning rounded">
              <i class="bx bx-wrench fs-4"></i>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!--Charts Row-->
<div class="row mb-4">
  <!--Metrics Chart-->
  <div class="col-md-6 mb-4">
    <div class="card">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Key Metrics Comparison</h5>
        <div class="chart-filters">
          <div class="form-check form-check-inline m-0">
            <input class="form-check-input" type="checkbox" id="showAvailability" checked>
            <label class="form-check-label" for="showAvailability">Availability</label>
          </div>
          <div class="form-check form-check-inline m-0">
            <input class="form-check-input" type="checkbox" id="showUtilisation" checked>
            <label class="form-check-label" for="showUtilisation">Utilisation</label>
          </div>
          <div class="form-check form-check-inline m-0">
            <input class="form-check-input" type="checkbox" id="showUsage" checked>
            <label class="form-check-label" for="showUsage">Usage</label>
          </div>
        </div>
      </div>
      <div class="card-body">
        <div id="metrics-chart" style="height: 350px;"></div>
      </div>
    </div>
  </div>

  <!--Time Distribution Chart-->
  <div class="col-md-6 mb-4">
    <div class="card">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Time Distribution</h5>
        <select id="timeDistributionView" class="form-select form-select-sm" style="width: auto;">
          <option value="all" selected>All Categories</option>
          <option value="operational">Operational Categories</option>
          <option value="maintenance">Maintenance Categories</option>
        </select>
      </div>
      <div class="card-body">
        <div id="time-distribution-chart" style="height: 350px;"></div>
      </div>
    </div>
  </div>
</div>

<!--Crane Details Table-->
<div class="card mb-4">
  <div class="card-header d-flex justify-content-between align-items-center">
    <h5 class="mb-0">Crane Performance Details</h5>
    <div class="dropdown">
      <button class="btn btn-sm btn-outline-primary dropdown-toggle" type="button" id="columnVisibility"
        data-bs-toggle="dropdown">
        Column Visibility
      </button>
      <div class="dropdown-menu p-2">
        <div class="form-check">
          <input class="form-check-input column-toggle" type="checkbox" id="col-status" checked data-column="2">
          <label class="form-check-label" for="col-status">Status</label>
        </div>
        <div class="form-check">
          <input class="form-check-input column-toggle" type="checkbox" id="col-availability" checked data-column="3">
          <label class="form-check-label" for="col-availability">Availability</label>
        </div>
        <div class="form-check">
          <input class="form-check-input column-toggle" type="checkbox" id="col-utilisation" checked data-column="4">
          <label class="form-check-label" for="col-utilisation">Utilisation</label>
        </div>
        <div class="form-check">
          <input class="form-check-input column-toggle" type="checkbox" id="col-usage" checked data-column="5">
          <label class="form-check-label" for="col-usage">Usage</label>
        </div>
        <div class="form-check">
          <input class="form-check-input column-toggle" type="checkbox" id="col-time" checked data-column="6,7,8,9,10">
          <label class="form-check-label" for="col-time">Time Breakdown</label>
        </div>
      </div>
    </div>
  </div>
  <div class="card-body">
    <div class="table-responsive">
      <table class="table table-hover" id="crane-metrics-table">
        <thead>
          <tr>
            <th>Crane Code</th>
            <th>Capacity</th>
            <th>Status</th>
            <th>Availability</th>
            <th>Utilisation</th>
            <th>Usage</th>
            <th>Operating</th>
            <th>Delay</th>
            <th>Standby</th>
            <th>Service</th>
            <th>Breakdown</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
  </div>
</div>


@section PageScripts {
  <script>
    // Global variables for charts
    let metricsChart = null;
    let timeDistributionChart = null;
    let dataTable = null;
    let lastFilterParams = null;
    let lastData = null;

    $(function () {
      // Debug info
      console.log("Libraries loaded check:");
      console.log("jQuery version:", typeof $ !== 'undefined' ? $.fn.jquery : "Not loaded");
      console.log("ApexCharts:", typeof ApexCharts !== 'undefined' ? "Loaded" : "Not loaded");
      console.log("Moment.js:", typeof moment !== 'undefined' ? "Loaded" : "Not loaded");
      console.log("DataTables:", typeof $.fn.DataTable !== 'undefined' ? "Loaded" : "Not loaded");

      // Show/hide custom date range fields
      $('#dateRange').change(function () {
        if ($(this).val() === 'custom') {
          $('.custom-date-range').show();
        } else {
          $('.custom-date-range').hide();
        }
      });

      // Initialize with 30 days of data
      loadDashboardData();

      // Apply filter button click
      $('#applyFilter').click(function () {
        loadDashboardData();
      });

      // Chart metric filter toggles
      $('.chart-filters input[type="checkbox"]').change(function () {
        if (lastData) {
          createMetricsChart(lastData.craneMetrics);
        }
      });

      // Time distribution view change
      $('#timeDistributionView').change(function () {
        if (lastData) {
          createTimeDistributionChart(lastData.craneMetrics);
        }
      });

      // Column visibility toggle
      $('.column-toggle').change(function () {
        const column = $(this).data('column');
        if (dataTable) {
          // Handle multiple columns if needed
          if (column.toString().includes(',')) {
            const columns = column.toString().split(',').map(Number);
            columns.forEach(col => {
              dataTable.column(col).visible($(this).is(':checked'));
            });
          } else {
            dataTable.column(column).visible($(this).is(':checked'));
          }
        }
      });
    });

    function loadDashboardData() {
      // Prepare parameters
      let params = {};

      // Get date range
      const dateRangeVal = $('#dateRange').val();
      if (dateRangeVal === 'custom') {
        // Custom date range
        const startDate = $('#startDate').val();
        const endDate = $('#endDate').val();

        if (startDate) {
          params.startDate = startDate;
        }
        if (endDate) {
          params.endDate = endDate;
        }
      } else {
        // Predefined date range (7, 30, 90 days)
        const days = parseInt(dateRangeVal);
        const today = new Date();
        const startDate = new Date();
        startDate.setDate(today.getDate() - days);

        params.startDate = startDate.toISOString().split('T')[0];
        params.endDate = today.toISOString().split('T')[0];
      }

      // Get crane filter
      const craneId = $('#craneId').val();
      if (craneId) {
        params.craneId = craneId;
      }

      // Log the params for debugging
      console.log("Filter parameters:", params);

      // Save current params for comparison
      lastFilterParams = JSON.stringify(params);

      // Show loading indicators
      const loadingHtml = '<div class="d-flex justify-content-center my-4"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';
      $('#metrics-chart, #time-distribution-chart').html(loadingHtml);
      $('#crane-metrics-table tbody').html('<tr><td colspan="11" class="text-center">' + loadingHtml + '</td></tr>');

      // Fetch data with timestamp to prevent caching
      params._nocache = new Date().getTime();

      $.ajax({
        url: '/api/Dashboard/CraneMetrics',
        type: 'GET',
        data: params,
        dataType: 'json',
        cache: false, // Disable AJAX caching
        success: function (data) {
          console.log("API Response:", data);
          try {
            if (data && data.craneMetrics) {
              // Save data globally
              lastData = data;
              updateDashboard(data);
            } else {
              console.error('Invalid data format received from API');
              $('#metrics-chart, #time-distribution-chart').html('<div class="alert alert-danger">Error: Invalid data format received</div>');
              $('#crane-metrics-table tbody').html('<tr><td colspan="11" class="text-center">Error: Invalid data format received</td></tr>');
            }
          } catch (error) {
            console.error('Error processing dashboard data:', error);
            $('#metrics-chart, #time-distribution-chart').html('<div class="alert alert-danger">Error processing data</div>');
            $('#crane-metrics-table tbody').html('<tr><td colspan="11" class="text-center">Error processing data</td></tr>');
          }
        },
        error: function (xhr, status, error) {
          console.error('Error fetching dashboard data:', error);
          $('#metrics-chart, #time-distribution-chart').html('<div class="alert alert-danger">Failed to load data. Please try again.</div>');
          $('#crane-metrics-table tbody').html('<tr><td colspan="11" class="text-center">Failed to load data. Error: ' + (xhr.statusText || error) + '</td></tr>');
        }
      });
    }

    function updateDashboard(data) {
      console.log("Updating dashboard with data:", data);

      // Update summary cards
      $('#avg-availability').text(data.overallMetrics.averageAvailability.toFixed(2) + '%');
      $('#avg-utilisation').text(data.overallMetrics.averageUtilisation.toFixed(2) + '%');
      $('#avg-usage').text(data.overallMetrics.averageUsage.toFixed(2) + '%');

      // Update crane status
      $('#total-cranes').text(data.overallMetrics.totalCranes);
      $('#available-cranes').text(data.overallMetrics.availableCranes);
      $('#maintenance-cranes').text(data.overallMetrics.maintenanceCranes);

      // Update table
      updateCraneMetricsTable(data.craneMetrics);

      // Update charts
      createMetricsChart(data.craneMetrics);
      createTimeDistributionChart(data.craneMetrics);
    }

    function updateCraneMetricsTable(craneMetrics) {
      console.log("Updating table with crane metrics:", craneMetrics);

      // Destroy existing DataTable if exists
      if (dataTable) {
        dataTable.destroy();
        dataTable = null;
      }

      const tableBody = $('#crane-metrics-table tbody');
      tableBody.empty();

      craneMetrics.forEach(function (crane) {
        // Perbaikan kondisi pengecekan status
        const isAvailable = crane.status === 0 || crane.status === "Available";
        const statusClass = isAvailable ? 'bg-label-success' : 'bg-label-warning';
        const statusText = isAvailable ? 'Available' : 'Maintenance';


        let row = `<tr>
                          <td><strong>${crane.craneCode}</strong></td>
                          <td>${crane.capacity} ton</td>
                          <td><span class="badge ${statusClass}">${statusText}</span></td>
                          <td>${crane.metrics.availability.toFixed(2)}%</td>
                          <td>${crane.metrics.utilisation.toFixed(2)}%</td>
                          <td>${crane.metrics.usage.toFixed(2)}%</td>
                          <td>${crane.timeBreakdown.operatingTime.toFixed(2)} hrs</td>
                          <td>${crane.timeBreakdown.delayTime.toFixed(2)} hrs</td>
                          <td>${crane.timeBreakdown.standbyTime.toFixed(2)} hrs</td>
                          <td>${crane.timeBreakdown.serviceTime.toFixed(2)} hrs</td>
                          <td>${crane.timeBreakdown.breakdownTime.toFixed(2)} hrs</td>
                        </tr>`;

        tableBody.append(row);
      });

      // Initialize DataTable
      try {
        if (typeof $.fn.DataTable !== 'undefined') {
          dataTable = $('#crane-metrics-table').DataTable({
            responsive: true,
            lengthMenu: [5, 10, 25, 50],
            pageLength: 10,
            order: [[3, 'desc']], // Order by Availability
            destroy: true // Ensure old instance is destroyed
          });
        } else {
          console.warn('DataTables library is not loaded');
        }
      } catch (error) {
        console.error('Error initializing DataTable:', error);
      }
    }

    function createMetricsChart(craneMetrics) {
      console.log("Creating metrics chart with data:", craneMetrics);

      // Clear existing chart
      document.querySelector("#metrics-chart").innerHTML = '';

      // Ensure ApexCharts is loaded
      if (typeof ApexCharts === 'undefined') {
        document.querySelector("#metrics-chart").innerHTML = '<div class="alert alert-danger">Error: ApexCharts library is not loaded</div>';
        return;
      }

      // Get filter states
      const showAvailability = $('#showAvailability').is(':checked');
      const showUtilisation = $('#showUtilisation').is(':checked');
      const showUsage = $('#showUsage').is(':checked');

      // Prepare data for the chart
      const categories = craneMetrics.map(crane => crane.craneCode);

      // Prepare series based on filter
      let series = [];

      if (showAvailability) {
        series.push({
          name: 'Availability',
          data: craneMetrics.map(crane => crane.metrics.availability)
        });
      }

      if (showUtilisation) {
        series.push({
          name: 'Utilisation',
          data: craneMetrics.map(crane => crane.metrics.utilisation)
        });
      }

      if (showUsage) {
        series.push({
          name: 'Usage',
          data: craneMetrics.map(crane => crane.metrics.usage)
        });
      }

      const options = {
        series: series,
        chart: {
          type: 'bar',
          height: 350,
          stacked: false,
          toolbar: {
            show: true,
            tools: {
              download: true,
              selection: false,
              zoom: false,
              zoomin: false,
              zoomout: false,
              pan: false,
              reset: false
            }
          },
          animations: {
            enabled: true,
            easing: 'easeinout',
            speed: 800,
            animateGradually: {
              enabled: true,
              delay: 150
            },
            dynamicAnimation: {
              enabled: true,
              speed: 350
            }
          }
        },
        plotOptions: {
          bar: {
            horizontal: false,
            columnWidth: '55%',
            borderRadius: 2
          },
        },
        dataLabels: {
          enabled: false
        },
        stroke: {
          show: true,
          width: 2,
          colors: ['transparent']
        },
        xaxis: {
          categories: categories,
          title: {
            text: 'Crane'
          }
        },
        yaxis: {
          title: {
            text: 'Percentage (%)'
          },
          min: 0,
          max: 100
        },
        fill: {
          opacity: 1
        },
        tooltip: {
          y: {
            formatter: function (val) {
              return val.toFixed(2) + "%";
            }
          }
        },
        colors: ['#696cff', '#03c3ec', '#71dd37'],
        legend: {
          position: 'top'
        }
      };

      try {
        // Destroy previous chart if exists
        if (metricsChart) {
          metricsChart.destroy();
        }

        // Create new chart
        metricsChart = new ApexCharts(document.querySelector("#metrics-chart"), options);
        metricsChart.render();
      } catch (error) {
        console.error('Error rendering metrics chart:', error);
        document.querySelector("#metrics-chart").innerHTML = '<div class="alert alert-danger">Error rendering chart: ' + error.message + '</div>';
      }
    }

    function createTimeDistributionChart(craneMetrics) {
      console.log("Creating time distribution chart with data:", craneMetrics);

      // Clear existing chart
      document.querySelector("#time-distribution-chart").innerHTML = '';

      // Ensure ApexCharts is loaded
      if (typeof ApexCharts === 'undefined') {
        document.querySelector("#time-distribution-chart").innerHTML = '<div class="alert alert-danger">Error: ApexCharts library is not loaded</div>';
        return;
      }

      // Get view filter
      const viewFilter = $('#timeDistributionView').val();

      // Calculate overall time distribution
      let operatingTime = 0, delayTime = 0, standbyTime = 0, serviceTime = 0, breakdownTime = 0;

      craneMetrics.forEach(crane => {
        operatingTime += crane.timeBreakdown.operatingTime;
        delayTime += crane.timeBreakdown.delayTime;
        standbyTime += crane.timeBreakdown.standbyTime;
        serviceTime += crane.timeBreakdown.serviceTime;
        breakdownTime += crane.timeBreakdown.breakdownTime;
      });

      // Prepare labels and data based on view filter
      let labels = [];
      let seriesData = [];
      let colors = [];

      if (viewFilter === 'operational') {
        // Only show operational categories
        labels = ['Operating', 'Delay', 'Standby'];
        const operationalTotal = operatingTime + delayTime + standbyTime;

        if (operationalTotal > 0) {
          seriesData = [
            (operatingTime / operationalTotal * 100).toFixed(2),
            (delayTime / operationalTotal * 100).toFixed(2),
            (standbyTime / operationalTotal * 100).toFixed(2)
          ].map(Number);
        } else {
          seriesData = [0, 0, 0];
        }

        colors = ['#71dd37', '#ffab00', '#03c3ec'];
      }
      else if (viewFilter === 'maintenance') {
        // Only show maintenance categories
        labels = ['Service', 'Breakdown'];
        const maintenanceTotal = serviceTime + breakdownTime;

        if (maintenanceTotal > 0) {
          seriesData = [
            (serviceTime / maintenanceTotal * 100).toFixed(2),
            (breakdownTime / maintenanceTotal * 100).toFixed(2)
          ].map(Number);
        } else {
          seriesData = [0, 0];
        }

        colors = ['#8592a3', '#ff3e1d'];
      }
      else {
        // Show all categories
        labels = ['Operating', 'Delay', 'Standby', 'Service', 'Breakdown'];
        const totalTime = operatingTime + delayTime + standbyTime + serviceTime + breakdownTime;

        if (totalTime > 0) {
          seriesData = [
            (operatingTime / totalTime * 100).toFixed(2),
            (delayTime / totalTime * 100).toFixed(2),
            (standbyTime / totalTime * 100).toFixed(2),
            (serviceTime / totalTime * 100).toFixed(2),
            (breakdownTime / totalTime * 100).toFixed(2)
          ].map(Number);
        } else {
          seriesData = [0, 0, 0, 0, 0];
        }

        colors = ['#71dd37', '#ffab00', '#03c3ec', '#8592a3', '#ff3e1d'];
      }

      const options = {
        series: seriesData,
        chart: {
          height: 350,
          type: 'pie',
          animations: {
            enabled: true,
            easing: 'easeinout',
            speed: 800,
            animateGradually: {
              enabled: true,
              delay: 150
            },
            dynamicAnimation: {
              enabled: true,
              speed: 350
            }
          }
        },
        labels: labels,
        responsive: [{
          breakpoint: 480,
          options: {
            chart: {
              height: 300
            },
            legend: {
              position: 'bottom'
            }
          }
        }],
        colors: colors,
        tooltip: {
          y: {
            formatter: function (val) {
              return val.toFixed(2) + "%";
            }
          }
        },
        legend: {
          position: 'bottom'
        }
      };

      try {
        // Destroy previous chart if exists
        if (timeDistributionChart) {
          timeDistributionChart.destroy();
        }

        // Create new chart
        timeDistributionChart = new ApexCharts(document.querySelector("#time-distribution-chart"), options);
        timeDistributionChart.render();
      } catch (error) {
        console.error('Error rendering time distribution chart:', error);
        document.querySelector("#time-distribution-chart").innerHTML = '<div class="alert alert-danger">Error rendering chart: ' + error.message + '</div>';
      }
    }
  </script>
}
